/*
 * Foodstuffs API - Pak 'n Save & New World
 *
 * Foodstuffs API, providing access to Pak'nSave and New World stores without using their website or mobile app.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GetCurrentUserResponse
    /// </summary>
    [DataContract(Name = "GetCurrentUser_Response")]
    public partial class GetCurrentUserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetCurrentUserResponse" /> class.
        /// </summary>
        /// <param name="accessToken">The JWT Token..</param>
        /// <param name="expiresTime">The expiration date of the token..</param>
        /// <param name="currentTime">The current server time..</param>
        /// <param name="hasClubCard">Whether the user has a club card..</param>
        public GetCurrentUserResponse(string accessToken = default(string), string expiresTime = default(string), string currentTime = default(string), bool hasClubCard = default(bool))
        {
            this.AccessToken = accessToken;
            this.ExpiresTime = expiresTime;
            this.CurrentTime = currentTime;
            this.HasClubCard = hasClubCard;
        }

        /// <summary>
        /// The JWT Token.
        /// </summary>
        /// <value>The JWT Token.</value>
        [DataMember(Name = "access_token", EmitDefaultValue = false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The expiration date of the token.
        /// </summary>
        /// <value>The expiration date of the token.</value>
        /*
        <example>2025-04-22 09:22:37Z</example>
        */
        [DataMember(Name = "expires_time", EmitDefaultValue = false)]
        public string ExpiresTime { get; set; }

        /// <summary>
        /// The current server time.
        /// </summary>
        /// <value>The current server time.</value>
        /*
        <example>2025-04-22 08:52:37Z</example>
        */
        [DataMember(Name = "current_time", EmitDefaultValue = false)]
        public string CurrentTime { get; set; }

        /// <summary>
        /// Whether the user has a club card.
        /// </summary>
        /// <value>Whether the user has a club card.</value>
        /*
        <example>true</example>
        */
        [DataMember(Name = "hasClubCard", EmitDefaultValue = true)]
        public bool HasClubCard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetCurrentUserResponse {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  ExpiresTime: ").Append(ExpiresTime).Append("\n");
            sb.Append("  CurrentTime: ").Append(CurrentTime).Append("\n");
            sb.Append("  HasClubCard: ").Append(HasClubCard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
