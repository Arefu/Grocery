/*
 * Foodstuffs API - Pak 'n Save & New World
 *
 * Foodstuffs API, providing access to Pak'nSave and New World stores without using their website or mobile app.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner
    /// </summary>
    [DataContract(Name = "_prod_mobile_ecomm_products_PNS__store_guid__search_q__term__post_200_response_products_inner")]
    public partial class ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner" /> class.
        /// </summary>
        /// <param name="productId">productId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="units">units.</param>
        /// <param name="categories">categories.</param>
        /// <param name="price">price (required).</param>
        /// <param name="unitPrice">unitPrice (required).</param>
        /// <param name="productImageUrls">productImageUrls (required).</param>
        /// <param name="availableInStore">availableInStore.</param>
        /// <param name="availableInOnline">availableInOnline.</param>
        /// <param name="tobaccoFlag">tobaccoFlag.</param>
        /// <param name="liquorFlag">liquorFlag.</param>
        /// <param name="saleType">saleType.</param>
        public ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner(string productId = default(string), string name = default(string), string units = default(string), List<string> categories = default(List<string>), int price = default(int), string unitPrice = default(string), ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInnerProductImageUrls productImageUrls = default(ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInnerProductImageUrls), bool availableInStore = default(bool), bool availableInOnline = default(bool), bool tobaccoFlag = default(bool), bool liquorFlag = default(bool), string saleType = default(string))
        {
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner and cannot be null");
            }
            this.ProductId = productId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner and cannot be null");
            }
            this.Name = name;
            this.Price = price;
            // to ensure "unitPrice" is required (not null)
            if (unitPrice == null)
            {
                throw new ArgumentNullException("unitPrice is a required property for ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner and cannot be null");
            }
            this.UnitPrice = unitPrice;
            // to ensure "productImageUrls" is required (not null)
            if (productImageUrls == null)
            {
                throw new ArgumentNullException("productImageUrls is a required property for ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner and cannot be null");
            }
            this.ProductImageUrls = productImageUrls;
            this.Units = units;
            this.Categories = categories;
            this.AvailableInStore = availableInStore;
            this.AvailableInOnline = availableInOnline;
            this.TobaccoFlag = tobaccoFlag;
            this.LiquorFlag = liquorFlag;
            this.SaleType = saleType;
        }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Units
        /// </summary>
        [DataMember(Name = "units", EmitDefaultValue = false)]
        public string Units { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        [DataMember(Name = "categories", EmitDefaultValue = false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public int Price { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name = "unitPrice", IsRequired = true, EmitDefaultValue = true)]
        public string UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets ProductImageUrls
        /// </summary>
        [DataMember(Name = "productImageUrls", IsRequired = true, EmitDefaultValue = true)]
        public ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInnerProductImageUrls ProductImageUrls { get; set; }

        /// <summary>
        /// Gets or Sets AvailableInStore
        /// </summary>
        [DataMember(Name = "availableInStore", EmitDefaultValue = true)]
        public bool AvailableInStore { get; set; }

        /// <summary>
        /// Gets or Sets AvailableInOnline
        /// </summary>
        [DataMember(Name = "availableInOnline", EmitDefaultValue = true)]
        public bool AvailableInOnline { get; set; }

        /// <summary>
        /// Gets or Sets TobaccoFlag
        /// </summary>
        [DataMember(Name = "tobaccoFlag", EmitDefaultValue = true)]
        public bool TobaccoFlag { get; set; }

        /// <summary>
        /// Gets or Sets LiquorFlag
        /// </summary>
        [DataMember(Name = "liquorFlag", EmitDefaultValue = true)]
        public bool LiquorFlag { get; set; }

        /// <summary>
        /// Gets or Sets SaleType
        /// </summary>
        [DataMember(Name = "saleType", EmitDefaultValue = false)]
        public string SaleType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProdMobileEcommProductsPNSStoreGuidSearchQTermPost200ResponseProductsInner {\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  ProductImageUrls: ").Append(ProductImageUrls).Append("\n");
            sb.Append("  AvailableInStore: ").Append(AvailableInStore).Append("\n");
            sb.Append("  AvailableInOnline: ").Append(AvailableInOnline).Append("\n");
            sb.Append("  TobaccoFlag: ").Append(TobaccoFlag).Append("\n");
            sb.Append("  LiquorFlag: ").Append(LiquorFlag).Append("\n");
            sb.Append("  SaleType: ").Append(SaleType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
